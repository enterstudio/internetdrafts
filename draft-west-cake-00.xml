<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC4790 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4790.xml">
<!ENTITY RFC5234 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC6265 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
<!ENTITY RFC6454 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6454.xml">
<!ENTITY RFC3864 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3864.xml">
]>

<rfc docName="draft-west-cake-00" category="std">

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

  <front>
    <title abbrev="Origin-Cookies">Cake is tastier than cookies</title>

    <author initials="M." surname="West" fullname="Mike West">
      <organization>Google, Inc</organization>
      <address>
        <email>mkwst@google.com</email>
        <uri>https://mikewest.org/</uri>
      </address>
    </author>

    <date year="2014"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines the <spanx style="verb">origin</spanx> attribute for cookies and the <spanx style="verb">Origin-Cookie</spanx> header field, which together allow servers to choose to harmonize the security policy of their cookies with the same-origin policy which governs other available client-side storage mechanisms.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Cookies, as defined by <xref target="RFC6265"/>, diverge from the web’s general security
policy in a number of ways which may be surprising to implementers and authors
who haven’t carefully read that document’s discussion of “domain matching”, and
“path matching”, or who ignored the admonitions regarding “Weak Confidentiality”
and “Weak Integrity”.</t>

<t>This document updates <xref target="RFC6265"/>, describing a mechanism by which servers can
opt-in to harmonizing cookies’ security policy with the same-origin policy, as
described in <xref target="RFC6454"/>. User agents that support these “origin cookies” will
ignore a <spanx style="verb">Set-Cookie</spanx> header’s value’s <spanx style="verb">Path</spanx>, <spanx style="verb">Domain</spanx>, and <spanx style="verb">Secure</spanx>
attributes if an <spanx style="verb">Origin</spanx> attribute is present, instead tying the cookie to the
origin that set it. These “origin cookies” will be returned in a new
<spanx style="verb">Origin-Cookie</spanx> header field (see <xref target="origin-cookie-header-field"/> for detail),
separating them from non-origin cookies in a way a server can easily
distinguish.</t>

<t>Harmonizing with the same-origin policy mitigates the confidentiality and
integrity risks noted above by ensuring that origin cookies are not influenced
by malicious code running on a server’s subdomain or a non-standard port or
scheme.</t>

<section anchor="examples" title="Examples">

<t>Origin cookies are set via the <spanx style="verb">Origin</spanx> attribute in the <spanx style="verb">Set-Cookie</spanx> header
field. That is, given a server’s response to a user agent which contains the
following header field:</t>

<figure><artwork><![CDATA[
Set-Cookie: SID=31d4d96e407aad42; Origin
]]></artwork></figure>

<t>Subsequent requests from that user agent can be expected to contain the
following header field:</t>

<figure><artwork><![CDATA[
Origin-Cookie: SID=31d4d96e407aad42
]]></artwork></figure>

<t>Non-origin cookies are returned in the <spanx style="verb">Cookie</spanx> header field as usual. If both
non-origin and origin cookies are present for an origin, then both a <spanx style="verb">Cookie</spanx>
and <spanx style="verb">Origin-Cookie</spanx> header field will be present. That is, given a server’s
response to a user agent which contains the following header fields:</t>

<figure><artwork><![CDATA[
Set-Cookie: SID=31d4d96e407aad42; Origin
Set-Cookie: lang=en-US; Path=/; Domain=example.com
]]></artwork></figure>

<t>Subsequent requests from that user agent can be expected to contain the
following header fields:</t>

<figure><artwork><![CDATA[
Cookie: lang=en-US
Origin-Cookie: SID=31d4d96e407aad42
]]></artwork></figure>

</section>
</section>
<section anchor="terminology-and-notation" title="Terminology and notation">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification uses the Augmented Backus-Naur Form (ABNF) notation of
<xref target="RFC5234"/>.</t>

<t>Two sequences of octets are said to case-insensitively match each other if and
only if they are equivalent under the <spanx style="verb">i;ascii-casemap</spanx> collation defined in
<xref target="RFC4790"/>.</t>

</section>
<section anchor="user-agent-requirements" title="User Agent Requirements">

<t>This section describes extensions to <xref target="RFC6265"/> necessary in order to implement
the client-side requirements of the <spanx style="verb">Origin</spanx> attribute and <spanx style="verb">Origin-Cookie</spanx>
header field.</t>

<section anchor="grammar" title="Grammar">

<t>Replace <xref target="RFC6265"/>’s <spanx style="verb">cookie-av</spanx> token definition with the following ABNF
grammar:</t>

<figure><artwork><![CDATA[
cookie-av         = expires-av / max-age-av / domain-av /
                    path-av / secure-av / httponly-av /
                    origin-av / extension-av
origin-av         = "Origin"
]]></artwork></figure>

</section>
<section anchor="the-origin-attribute" title="The “Origin” attribute">

<t>The following attribute definition should be considered part of the the
<spanx style="verb">Set-Cookie</spanx> algorithm as described in Section 5.2 of <xref target="RFC6265"/>:</t>

<t>If the attribute-name case-insensitively matches the string “Origin”, the
user agent MUST append an attribute to the cookie-attribute-list with an
attribute-name of <spanx style="verb">Origin</spanx> and an empty attribute-value.</t>

</section>
<section anchor="monkey-patching-the-storage-model" title="Monkey-patching the Storage Model">

<t>Note: There’s got to be a better way to specify this. Until I figure out
what that is, monkey-patching!</t>

<t>Alter Section 5.3 of <xref target="RFC6265"/> as follows:</t>

<t><list style="numbers">
  <t>Add <spanx style="verb">origin</spanx> and <spanx style="verb">origin-flag</spanx> to the list of fields stored about each
cookie.</t>
  <t>Before step 11 of the current algorithm, add the following:  <list style="numbers">
      <t>If the <spanx style="verb">cookie-attribute-list</spanx> contains an attribute with an
<spanx style="verb">attribute-name</spanx> of “Origin”:      <list style="numbers">
          <t>Set the cookie’s <spanx style="verb">domain</spanx> attribute to the empty string.</t>
          <t>Set the cookie’s <spanx style="verb">http-only-flag</spanx> to true.</t>
          <t>Set the cookie’s <spanx style="verb">host-only-flag</spanx> to true.</t>
          <t>Set the cookie’s <spanx style="verb">origin</spanx> to the origin of <spanx style="verb">request-uri</spanx>, as
defined by Section 4 of <xref target="RFC6454"/>.</t>
          <t>Set the cookie’s <spanx style="verb">origin-flag</spanx> to true.</t>
          <t>Set the cookie’s <spanx style="verb">path</spanx> attribute to the empty string.</t>
          <t>Set the cookie’s <spanx style="verb">secure-only-flag</spanx> to false.</t>
        </list>
Otherwise: set the cookie’s <spanx style="verb">origin-flag</spanx> to false, and its <spanx style="verb">origin</spanx>
to <spanx style="verb">null</spanx>.</t>
      <t>If the newly created cookie’s <spanx style="verb">origin-flag</spanx> is set to true, and the
cookie store contains a cookie with the same<spanx style="verb">name</spanx>, <spanx style="verb">origin</spanx>, and
<spanx style="verb">origin-flag</spanx> as the newly created cookie:      <list style="numbers">
          <t>Let <spanx style="verb">old-cookie</spanx> be the existing cookie with the same
<spanx style="verb">name</spanx>, <spanx style="verb">origin</spanx>, and <spanx style="verb">origin-flag</spanx> as the newly created cookie.</t>
          <t>Update the <spanx style="verb">creation-time</spanx> of the newly created cookie to match the
<spanx style="verb">creation-time</spanx> of <spanx style="verb">old-cookie</spanx>.</t>
          <t>Remove <spanx style="verb">old-cookie</spanx> from the cookie store.</t>
        </list></t>
    </list></t>
  <t>Change the priority order for excess cookie removal to the following:  <list style="numbers">
      <t>Expired cookies.</t>
      <t>Cookies whose <spanx style="verb">origin-flag</spanx> is false that share a <spanx style="verb">domain</spanx> field with
more than a predetermined number of other cookies.</t>
      <t>Cookies whose <spanx style="verb">origin-flag</spanx> is true that share a  <spanx style="verb">domain</spanx> field with
more than a predetermined number of other cookies.</t>
      <t>Cookies whose <spanx style="verb">origin-flag</spanx> is false.</t>
      <t>All cookies.</t>
    </list></t>
</list></t>

</section>
<section anchor="monkey-patching-the-cookie-header" title="Monkey-patching the “Cookie” header">

<t>Note: There’s got to be a better way to specify this. Until I figure out
what that is, monkey-patching!</t>

<t>Alter Section 5.4 of <xref target="RFC6265"/> as follows:</t>

<t><list style="numbers">
  <t>Add the following requirement to the list in step 1:  <list style="symbols">
      <t>The cookie’s <spanx style="verb">origin-flag</spanx> is false.</t>
    </list></t>
</list></t>

</section>
<section anchor="origin-cookie-header-field" title="The “Origin-Cookie” header field">

<t>The user agent includes stored cookies whose <spanx style="verb">origin-flag</spanx> is set in the
<spanx style="verb">Origin-Cookie</spanx> request header. When the user agent generates an HTTP request,
it MUST NOT attach more than one <spanx style="verb">Origin-Cookie</spanx> header field.</t>

<t>A user agent MAY omit the <spanx style="verb">Origin-Cookie</spanx> header in its entirety. For example,
the user agent may wish to block sending cookies during “third-party” requests.</t>

<t>If the user agent does attach an <spanx style="verb">Origin-Cookie</spanx> header field to an HTTP
request, the user agent MUST send the <spanx style="verb">cookie-string</spanx> as defined below as the
value of the header field.</t>

<t>The user agent MUST use an algorithm equivalent to the following algorithm to
compute the <spanx style="verb">cookie-string</spanx> from a cookie store and a <spanx style="verb">request-uri</spanx>:</t>

<t><list style="numbers">
  <t>Let <spanx style="verb">cookie-list</spanx> be the set of cookies from the cookie store that meets all
the following requirements:  <list style="symbols">
      <t>The cookie’s <spanx style="verb">origin-flag</spanx> is true.</t>
      <t>The cookie’s <spanx style="verb">origin</spanx> matches the origin of <spanx style="verb">request-uri</spanx>. <xref target="RFC6454"/></t>
      <t>The <spanx style="verb">cookie-string</spanx> is not being generated for a “non-HTTP” API (as
defined by the user agent).</t>
    </list></t>
  <t>The user agent SHOULD sort the <spanx style="verb">cookie-list</spanx> in the following order:  <list style="symbols">
      <t>Cookies with earlier <spanx style="verb">creation-time</spanx>s are listed before cookies with
later <spanx style="verb">creation-time</spanx>s.</t>
    </list></t>
  <t>Update the <spanx style="verb">last-access-time</spanx> of each cookie in the <spanx style="verb">cookie-list</spanx> to the
current date and time.</t>
  <t>Serialize the <spanx style="verb">cookie-list</spanx> into a <spanx style="verb">cookie-string</spanx> by processing each cookie
in the <spanx style="verb">cookie-list</spanx> in order:  <list style="numbers">
      <t>Output the cookie’s <spanx style="verb">name</spanx>, the %x3D (“=”) character, and the cookie’s
<spanx style="verb">value</spanx>.</t>
      <t>If there is an unprocessed cookie in the <spanx style="verb">cookie-list</spanx>, output the
characters %x3B and %x20 (“; “).</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>The security considerations listed in Section 8 of <xref target="RFC6265"/> apply equally
to origin cookies, with the exceptions of Sections 8.6 (“Weak
Confidentiality”) and Sections 8.7 (“Weak Isolation”), both of which are
substantially improved if the <spanx style="verb">Origin</spanx> attribute is set. Further:</t>

<section anchor="httponly" title="“HttpOnly”">

<t>Note that origin cookies are only accessible via HTTP. “Non-HTTP” APIs like
HTML’s <spanx style="verb">document.cookie</spanx> cannot read these cookies’ values.</t>

</section>
<section anchor="paths-are-ignored" title="Paths are ignored">

<t>Origin cookies will break the (flawed) <spanx style="verb">Path</spanx>-based isolation strategy which
some servers may be attempting to implement. If a server has used the <spanx style="verb">Path</spanx>
attribute to limit cookies to specific areas of a site (say <spanx style="verb">/admin</spanx>), then
they may be surprised by origin cookies’ pathless behavior.</t>

<t>That said, paths offer little to no protection against malicious code. The
origin is the only security boundry enforced rigorously by user agents; it is
therefore the only security boundry that server operators ought to rely on for
isolation.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>The permanent message header field registry (see <xref target="RFC3864"/>) SHOULD be updated
with the following registration:</t>

<section anchor="origin-cookie" title="Origin-Cookie">

<t><list style="hanging">
  <t hangText='Header field name'>
  Origin-Cookie</t>
  <t hangText='Applicable protocol'>
  http</t>
  <t hangText='Status'>
  standard</t>
  <t hangText='Author/Change controller'>
  IETF</t>
  <t hangText='Specification document'>
  This specification (see <xref target="origin-cookie-header-field"/>)</t>
</list></t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The origin cookie concept documented here is heavily indebted to and based upon
Adam Barth’s <xref target="draft-abarth-cake-01"/> document.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC4790;
&RFC5234;
&RFC6265;
&RFC6454;


    </references>

    <references title='Informative References'>

&RFC3864;
<reference anchor="draft-abarth-cake-01" target="https://tools.ietf.org/html/draft-abarth-cake-01">
  <front>
    <title>Origin Cookies</title>
    <author initials="A." surname="Barth" fullname="Adam Barth">
      <organization></organization>
    </author>
    <date year="2011" month="September" day="06"/>
  </front>
</reference>


    </references>


<section anchor="open-issues" title="Open Issues">

<t><list style="symbols">
  <t>Should origin cookies be settable via <spanx style="verb">document.cookie</spanx>? Does that weaken
the guarantees in any way we care about?</t>
</list></t>

</section>


  </back>
</rfc>

